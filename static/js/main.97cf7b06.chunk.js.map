{"version":3,"sources":["navigation/header.jsx","navigation/nav.jsx","pages/projectitem.jsx","pages/projects.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","Nav","onClick","handleNavClick","id","className","ProjectItem","translation","transform","angle","style","href","url","title","src","screenshot","Projects","state","projects","navAngleOffset","window","addEventListener","this","updateDimensions","setTimeout","handleTimeout","bind","JSON","parse","stringify","forEach","project","setState","console","log","map","p","i","key","React","Component","App","e","target","newAngle","navIndex","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAWeA,G,MATA,SAAAC,GACd,OACC,6BACC,0CACA,oDCYYC,EAfH,SAAAD,GACX,OACC,6BACE,wBAAIE,QAASF,EAAMG,gBACpB,wBAAIC,GAAG,OAAOC,UAAU,aAAxB,KAKA,wBAAID,GAAG,QAAQC,UAAU,aAAzB,Q,OCCYC,EAXK,SAAAN,GAChB,IAAIO,EAAc,CAACC,UAAU,+BAAD,OAAiCR,EAAMS,MAAvC,SAC5B,OACI,yBAAKJ,UAAU,eAAeK,MAAOH,GACjC,2BAAG,uBAAGI,KAAMX,EAAMY,KAAMZ,EAAMa,QAC9B,yBAAKR,UAAU,qBAAqBS,IAAKd,EAAMe,eCkD5CC,E,YApDd,WAAYhB,GAAQ,IAAD,8BAClB,4CAAMA,KAEDiB,MAAQ,CACZC,SAAU,CACT,CAAC,mBAAoB,uDAAwD,yBAA0B,KACvG,CAAC,mBAAoB,6CAA8C,yBAA0B,MAE9FC,eAAgB,EAAKnB,MAAMmB,gBARV,E,iFAalBC,OAAOC,iBAAiB,SAAUC,KAAKC,kBACvCC,WAAWF,KAAKG,cAAcC,KAAKJ,MAAO,O,sCAS1C,IAAIL,EAAQU,KAAKC,MAAMD,KAAKE,UAAUP,KAAKL,QAC3CA,EAAMC,SAASY,QAAQ,SAAAC,GACtBA,EAAQ,IAAM,MAEfT,KAAKU,SAASf,K,yCAIdgB,QAAQC,IAAI,+B,+BAIH,IAAD,OACJhB,EAAWI,KAAKL,MAAMC,SAASiB,IAAI,SAACC,EAAEC,GAAO,IAAD,cACTD,EADS,GAC1CvB,EAD0C,KACnCD,EADmC,KAC9BG,EAD8B,KAClBN,EADkB,KAG/C,OADAA,GAAS,EAAKQ,MAAME,eAEnB,kBAAC,EAAD,CAAamB,IAAKD,EAAGxB,MAAOA,EAAOD,IAAKA,EAAKG,WAAYA,EAAYN,MAAOA,MAI9E,OACC,yBAAKJ,UAAU,kBACba,M,gDA7B4BlB,EAAMiB,GACrCgB,QAAQC,IAAI,gCAAiClC,EAAMmB,gBACnDF,EAAME,eAAiBnB,EAAMmB,mB,GArBRoB,IAAMC,WCsCdC,E,YAhCb,WAAazC,GAAQ,IAAD,8BAClB,4CAAOA,KAQTG,eAAiB,SAACuC,GAChBT,QAAQC,IAAI,UAAWQ,EAAEC,OAAOvC,IAChC,IAAIwC,EAAW,EACK,SAAhBF,EAAEC,OAAOvC,GACXwC,EAAW,EAAK3B,MAAME,eAAiB,GAEhB,UAAhBuB,EAAEC,OAAOvC,KAChBwC,EAAW,EAAK3B,MAAME,eAAiB,IAEzC,EAAKa,SAAS,CAAEb,eAAgByB,KAfhC,EAAK3B,MAAQ,CACX4B,SAAU,EACV1B,eAAgB,GALA,E,sEAsBlB,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAKF,eAAgBmB,KAAKnB,iBAC1B,kBAAC,EAAD,CAAUgB,eAAgBG,KAAKL,MAAME,sB,GA5B3BoB,IAAMC,WCKJM,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.97cf7b06.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Kirk Hilse</h1>\r\n\t\t\t<h2>Unicorn Developer</h2>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Nav = props => {\r\n\treturn (\r\n\t\t<nav>\r\n\t\t  <ul onClick={props.handleNavClick}>\r\n\t\t\t<li id=\"left\" className=\"menu-item\">&lt;</li>\r\n\t        {/* <li id=\"1\" className=\"menu-item\">Bio</li>\r\n\t        <li id=\"2\" className=\"menu-item\">Project: Asteroid Defense</li>\r\n\t        <li id=\"3\" className=\"menu-item\">Project: Pedals and Pints</li>\r\n\t        <li id=\"4\" className=\"menu-item\">Project: Project 3</li> */}\r\n\t\t\t<li id=\"right\" className=\"menu-item\">&gt;</li>\r\n\t      </ul>\r\n      </nav>\r\n\t)\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nconst ProjectItem = props => {\r\n    let translation = {transform: `translate(-50%, 30%) rotate(${props.angle}deg)`};\r\n    return (\r\n        <div className=\"project-item\" style={translation}>\r\n            <p><a href={props.url}>{props.title}</a></p>\r\n            <img className=\"project-screenshot\" src={props.screenshot} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProjectItem;","import React from \"react\";\r\nimport ProjectItem from './projectitem';\r\n\r\nclass Projects extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tprojects: [\r\n\t\t\t\t[\"Asteroid Defense\", \"https://khilse.github.io/asteroid-defense/index.html\", \"./asteroid-defense.png\", 180],\r\n\t\t\t\t[\"Pedals and Pints\", \"https://pedals-and-pints-v1.herokuapp.com/\", \"./pedals-and-pints.png\", 210]\r\n\t\t\t],\r\n\t\t\tnavAngleOffset: this.props.navAngleOffset\r\n\t\t}\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\twindow.addEventListener('resize', this.updateDimensions);\r\n\t\tsetTimeout(this.handleTimeout.bind(this), 1000);\r\n\t}\r\n\r\n\tstatic getDerivedStateFromProps(props,state) {\r\n\t\tconsole.log('props updated, new offset is:', props.navAngleOffset)\r\n\t\tstate.navAngleOffset = props.navAngleOffset\r\n\t}\r\n\r\n\thandleTimeout() {\r\n\t\tlet state = JSON.parse(JSON.stringify(this.state));\r\n\t\tstate.projects.forEach(project => {\r\n\t\t\tproject[3] -= 180;\r\n\t\t})\r\n\t\tthis.setState(state);\r\n\t}\r\n\r\n\tupdateDimensions() {\r\n\t\tconsole.log('window dimensions changed')\r\n\t\t// TODO: scale projectitems accordingly\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet projects = this.state.projects.map((p,i) => {\r\n\t\t\tlet [title, url, screenshot, angle] = p;\r\n\t\t\tangle += this.state.navAngleOffset;\r\n\t\t\treturn (\r\n\t\t\t\t<ProjectItem key={i} title={title} url={url} screenshot={screenshot} angle={angle} />\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"project-radius\">\r\n\t\t\t\t{projects}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport './App.css';\r\n//import {BrowserRouter as Router} from \"react-router-dom\";\r\nimport Header from \"./navigation/header\";\r\nimport Nav from \"./navigation/nav\";\r\nimport Projects from \"./pages/projects\";\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor (props) {\r\n    super (props);\r\n\r\n    this.state = {\r\n      navIndex: 0,\r\n      navAngleOffset: 0      \r\n    }\r\n  }\r\n\r\n  handleNavClick = (e) => {\r\n    console.log('clicked', e.target.id)\r\n    let newAngle = 0;\r\n    if (e.target.id === 'left') {\r\n      newAngle = this.state.navAngleOffset - 30;\r\n    }\r\n    else if (e.target.id === 'right') {\r\n      newAngle = this.state.navAngleOffset + 30;\r\n    }\r\n    this.setState({ navAngleOffset: newAngle })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Nav handleNavClick={this.handleNavClick} />\r\n        <Projects navAngleOffset={this.state.navAngleOffset} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}